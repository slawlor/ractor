// Copyright (c) Sean Lawlor
//
// This source code is licensed under both the MIT license found in the
// LICENSE-MIT file in the root directory of this source tree.

//! Serialization definitions for `ractor_cluster` over-the-network message encoding. This
//! contains helpful types for encoding and decoding messages from raw byte vectors
//!
//! We implement the trait automatically for 8, 16, 32, 64, and 128 bit numerics but we specifically
//! DO NOT implement it for arch-specific types [isize] or [usize] because the may encode at one size
//! on one host and decode at the wrong size at the other host.
//!
//! We additionally do [String] and [Vec<`u8`>].

/// Trait for use with `ractor_cluster_derive::RactorClusterMessage`
/// derive macro. It defines argument and reply message types which
/// are serializable to/from byte payloads so code can be autogenerated
/// for you by macros for over-the-wire message formats between actors
pub trait BytesConvertable {
    /// Serialize this type to a vector of bytes. Panics are acceptable
    fn into_bytes(self) -> Vec<u8>;
    /// Deserialize this type from a vector of bytes. Panics are acceptable
    fn from_bytes(bytes: Vec<u8>) -> Self;
}

macro_rules! implement_numeric {
    {$ty: ty} => {
        impl BytesConvertable for $ty {
            fn into_bytes(self) -> Vec<u8> {
                self.to_be_bytes().to_vec()
            }
            fn from_bytes(bytes: Vec<u8>) -> Self {
                let mut data = [0u8; std::mem::size_of::<Self>()];
                data.copy_from_slice(&bytes[..std::mem::size_of::<Self>()]);
                Self::from_be_bytes(data)
            }
        }
    };
}

implement_numeric! {i8}
implement_numeric! {i16}
implement_numeric! {i32}
implement_numeric! {i64}
implement_numeric! {i128}

implement_numeric! {u8}
implement_numeric! {u16}
implement_numeric! {u32}
implement_numeric! {u64}
implement_numeric! {u128}

implement_numeric! {f32}
implement_numeric! {f64}

impl BytesConvertable for Vec<u8> {
    fn into_bytes(self) -> Vec<u8> {
        self
    }
    fn from_bytes(bytes: Vec<u8>) -> Self {
        bytes
    }
}

impl BytesConvertable for String {
    fn into_bytes(self) -> Vec<u8> {
        self.into_bytes()
    }
    fn from_bytes(bytes: Vec<u8>) -> Self {
        String::from_utf8(bytes).unwrap()
    }
}
